name: Build and Publish Final NuGet Package

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version_host: ${{ steps.extract-host-version.outputs.version_host }}
      version_client: ${{ steps.extract-client-version.outputs.version_client }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build the solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --no-restore --verbosity normal

    - name: Extract host version from .csproj
      id: extract-host-version
      shell: bash
      run: |
        VERSION_HOST=$(sed -n 's:.*<Version>\(.*\)</Version>.*:\1:p' Berrevoets.Aspire.Hosting.MailDev/Berrevoets.Aspire.Hosting.MailDev.csproj)
        if [ -z "$VERSION_HOST" ]; then
          echo "Error: Version could not be extracted."
          exit 1
        fi
        echo "version_host=$VERSION_HOST" >> $GITHUB_OUTPUT
        echo "Version extracted: $VERSION_HOST"

    - name: Extract client version from .csproj
      id: extract-client-version
      shell: bash
      run: |
        VERSION_CLIENT=$(sed -n 's:.*<Version>\(.*\)</Version>.*:\1:p' Berrevoets.Aspire.Client.Mail/Berrevoets.Aspire.Client.Mail.csproj)
        if [ -z "$VERSION_CLIENT" ]; then
          echo "Error: Version could not be extracted."
          exit 1
        fi
        echo "version_client=$VERSION_CLIENT" >> $GITHUB_OUTPUT
        echo "Version extracted: $VERSION_CLIENT"

  publish:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    needs: build
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Clean output directory
      shell: bash
      run: |
        if [ -d "${{ github.workspace }}/output" ]; then
          rm -rf "${{ github.workspace }}/output"
        fi
        mkdir "${{ github.workspace }}/output"

    - name: Build the solution (Host Release) again for packaging
      run: |
        echo "Building NuGet package with version: ${{ needs.build.outputs.version_host }}"
        dotnet build Berrevoets.Aspire.Hosting.MailDev/Berrevoets.Aspire.Hosting.MailDev.csproj --configuration Release /p:PackageVersion=${{ needs.build.outputs.version_host }}

    - name: Build the solution (Client Release) again for packaging
      run: |
        echo "Building NuGet package with version: ${{ needs.build.outputs.version_client }}"
        dotnet build Berrevoets.Aspire.Client.Mail/Berrevoets.Aspire.Client.Mail.csproj --configuration Release /p:PackageVersion=${{ needs.build.outputs.version_client }}

    - name: Pack Final NuGet Host package (with symbols)
      run: |
        echo "Packing NuGet package with version: ${{ needs.build.outputs.version_host }}"
        dotnet pack Berrevoets.Aspire.Hosting.MailDev/Berrevoets.Aspire.Hosting.MailDev.csproj --configuration Release --output "${{ github.workspace }}/output" /p:PackageVersion=${{ needs.build.outputs.version_host }} /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg

    - name: Pack Final NuGet Client package (with symbols)
      run: |
        echo "Packing NuGet package with version: ${{ needs.build.outputs.version_client }}"
        dotnet pack Berrevoets.Aspire.Client.Mail/Berrevoets.Aspire.Client.Mail.csproj --configuration Release --output "${{ github.workspace }}/output" /p:PackageVersion=${{ needs.build.outputs.version_client }} /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg

    - name: List output directory
      shell: bash
      run: ls "${{ github.workspace }}/output"

    - name: Publish Final NuGet package
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push "${{ github.workspace }}\output\*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

    - name: Publish Symbol Package (.snupkg)
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push "${{ github.workspace }}\output\*.snupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
